
'use strict'

/*

  The sequence of triangle numbers is generated by adding the natural numbers.
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?

  Answer: 76576500
  Completed on Fri, 22 Feb 2019, 08:52


*/



const divisors = n => {
  const divs = []
  for(let i = 0; i <= Math.sqrt(n) ; i++) {
    if(n%i===0) {
      if(n/i === i) {
        divs.push(i)
      } else {
        divs.push(i, n/i)
      }
    }
  }
  return {divs}
}

const getTriangles = () => {
  const angles = []
  for(let i = 1; i < 15000; i++) {
    let sum = 0
    for(let j = i; j > 0; j--) {
      sum += j
    }
    angles.push(sum)
  }
  return angles
}

const triangular = () => {
  const angles = getTriangles()
  const allDiffs = []

  for(let i = 0; i<angles.length; i++) {
    const {divs} = divisors(angles[i])
    allDiffs.push(divs)
    if(divs.length >= 500) {
      return {triangular_number: angles[i], divisors: divs.length}
    }
  }
  const result = allDiffs.map(div => div.length)
  return (Math.max(...result))
}


console.log("Problem 12: ", triangular())
